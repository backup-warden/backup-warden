name: .NET Release Package

on:
  workflow_run:
    workflows: [".NET Unit Tests"]
    types:
      - completed 
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  package:
    runs-on: windows-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: | 
            8.0.x
            
    - name: Decode PFX Certificate
      shell: pwsh
      run: |
        $pfxPath = Join-Path $env:RUNNER_TEMP "signing_cert.pfx"
        [System.IO.File]::WriteAllBytes($pfxPath, [System.Convert]::FromBase64String($env:SIGNING_CERTIFICATE_BASE64))
        echo "PFX_PATH=$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build and Package MSIX (x64)
      shell: pwsh
      run: |
        msbuild BackupWarden/BackupWarden.csproj /restore /t:Build `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:GenerateAppxPackageOnBuild=true `
          /p:AppxBundle=Never `
          /p:UapAppxPackageBuildMode=Sideload `
          /p:AppxPackageDir="$env:GITHUB_WORKSPACE/AppPackages_x64/" `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateKeyFile="$env:PFX_PATH"

    - name: Upload MSIX package (x64)
      uses: actions/upload-artifact@v4
      with:
        name: msix-package-x64
        path: AppPackages_x64/BackupWarden_*_x64_Test/BackupWarden_*_x64.msix
